
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import javax.swing.JTree;
import classes.view.JTreeFrame;
import classes.innernodes.*;
import classes.leaves.*;
import classes.listnodes.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\005\000\002\002\004\000\002\003" +
    "\002\000\002\003\004\000\002\004\010\000\002\005\002" +
    "\000\002\005\004\000\002\006\005\000\002\006\005\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\010\003\000\002\010\005\000\002\010" +
    "\005\000\002\010\007\000\002\011\005\000\002\011\007" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\004\000\002" +
    "\012\004\000\002\013\016\000\002\013\014\000\002\014" +
    "\002\000\002\014\003\000\002\015\003\000\002\015\005" +
    "\000\002\016\004\000\002\016\005\000\002\017\004\000" +
    "\002\017\005\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\004\000\002\020\002\000\002\021\012" +
    "\000\002\022\002\000\002\022\005\000\002\023\011\000" +
    "\002\024\005\000\002\024\004\000\002\025\003\000\002" +
    "\025\005\000\002\026\004\000\002\026\004\000\002\026" +
    "\004\000\002\026\004\000\002\027\005\000\002\030\006" +
    "\000\002\030\005\000\002\031\003\000\002\031\005\000" +
    "\002\031\004\000\002\031\006\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\004\000\002\032\004\000" +
    "\002\032\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\020\004\uffff\006\006\007\012\010\014\011" +
    "\010\015\uffff\063\013\001\002\000\004\005\251\001\002" +
    "\000\004\002\250\001\002\000\040\005\ufff8\006\ufff8\007" +
    "\ufff8\010\ufff8\011\ufff8\017\ufff8\022\ufff8\024\ufff8\025\ufff8" +
    "\026\ufff8\027\ufff8\030\ufff8\057\ufff8\061\ufff8\063\ufff8\001" +
    "\002\000\006\004\ufffc\015\040\001\002\000\040\005\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\011\ufff7\017\ufff7\022\ufff7\024" +
    "\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\057\ufff7\061\ufff7" +
    "\063\ufff7\001\002\000\044\004\uffff\005\uffff\006\006\007" +
    "\012\010\014\011\010\015\uffff\017\uffff\022\uffff\024\uffff" +
    "\025\uffff\026\uffff\027\uffff\030\uffff\057\uffff\061\uffff\063" +
    "\013\001\002\000\040\005\ufff5\006\ufff5\007\ufff5\010\ufff5" +
    "\011\ufff5\017\ufff5\022\ufff5\024\ufff5\025\ufff5\026\ufff5\027" +
    "\ufff5\030\ufff5\057\ufff5\061\ufff5\063\ufff5\001\002\000\004" +
    "\005\015\001\002\000\040\005\ufff6\006\ufff6\007\ufff6\010" +
    "\ufff6\011\ufff6\017\ufff6\022\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\027\ufff6\030\ufff6\057\ufff6\061\ufff6\063\ufff6\001\002\000" +
    "\004\031\034\001\002\000\006\057\020\060\017\001\002" +
    "\000\004\005\021\001\002\000\044\004\ufff9\005\ufff9\006" +
    "\ufff9\007\ufff9\010\ufff9\011\ufff9\015\ufff9\017\ufff9\022\ufff9" +
    "\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\057\ufff9\061" +
    "\ufff9\063\ufff9\001\002\000\004\031\022\001\002\000\016" +
    "\033\030\052\025\053\026\054\024\055\027\056\023\001" +
    "\002\000\006\057\uffea\060\uffea\001\002\000\006\057\uffee" +
    "\060\uffee\001\002\000\006\057\uffec\060\uffec\001\002\000" +
    "\006\057\uffeb\060\uffeb\001\002\000\006\057\uffed\060\uffed" +
    "\001\002\000\006\054\032\055\033\001\002\000\006\057" +
    "\uffef\060\uffef\001\002\000\006\057\uffe9\060\uffe9\001\002" +
    "\000\006\057\uffe8\060\uffe8\001\002\000\016\033\030\052" +
    "\025\053\026\054\024\055\027\056\023\001\002\000\006" +
    "\057\ufff0\060\ufff0\001\002\000\032\004\ufffe\005\ufffe\015" +
    "\ufffe\017\ufffe\022\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe" +
    "\030\ufffe\057\ufffe\061\ufffe\001\002\000\006\004\ufffc\015" +
    "\040\001\002\000\004\005\216\001\002\000\004\004\042" +
    "\001\002\000\040\005\uffff\006\006\007\012\010\014\011" +
    "\010\017\uffff\022\uffff\024\uffff\025\uffff\026\uffff\027\uffff" +
    "\030\uffff\057\uffff\061\uffff\063\013\001\002\000\004\002" +
    "\001\001\002\000\026\005\057\017\054\022\046\024\045" +
    "\025\060\026\051\027\065\030\050\057\uffd6\061\063\001" +
    "\002\000\004\005\211\001\002\000\024\005\077\012\074" +
    "\033\066\051\100\052\071\053\075\054\076\055\067\056" +
    "\072\001\002\000\004\057\uffdc\001\002\000\024\005\077" +
    "\012\074\033\066\051\100\052\071\053\075\054\076\055" +
    "\067\056\072\001\002\000\024\005\077\012\074\033\066" +
    "\051\100\052\071\053\075\054\076\055\067\056\072\001" +
    "\002\000\004\057\uffd8\001\002\000\004\057\uffdd\001\002" +
    "\000\024\005\077\012\074\033\066\051\100\052\071\053" +
    "\075\054\076\055\067\056\072\001\002\000\004\016\164" +
    "\001\002\000\004\057\uffd9\001\002\000\006\012\140\031" +
    "\162\001\002\000\024\005\077\012\074\033\066\051\100" +
    "\052\071\053\075\054\076\055\067\056\072\001\002\000" +
    "\004\057\uffda\001\002\000\004\057\157\001\002\000\024" +
    "\005\077\012\074\033\066\051\100\052\071\053\075\054" +
    "\076\055\067\056\072\001\002\000\004\057\uffdb\001\002" +
    "\000\024\005\077\012\074\033\066\051\100\052\071\053" +
    "\075\054\076\055\067\056\072\001\002\000\024\005\077" +
    "\012\074\033\066\051\100\052\071\053\075\054\076\055" +
    "\067\056\072\001\002\000\052\013\uffbf\020\uffbf\023\uffbf" +
    "\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040" +
    "\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf" +
    "\047\uffbf\050\uffbf\057\uffbf\060\uffbf\001\002\000\042\032" +
    "\106\033\103\034\113\035\120\036\111\037\104\040\115" +
    "\041\107\042\114\043\116\044\110\045\112\046\105\047" +
    "\102\050\117\057\uffca\001\002\000\052\013\uffc2\020\uffc2" +
    "\023\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037" +
    "\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2" +
    "\046\uffc2\047\uffc2\050\uffc2\057\uffc2\060\uffc2\001\002\000" +
    "\052\013\uffbe\020\uffbe\023\uffbe\032\uffbe\033\uffbe\034\uffbe" +
    "\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043" +
    "\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\057\uffbe" +
    "\060\uffbe\001\002\000\052\013\uffbc\020\uffbc\023\uffbc\032" +
    "\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc" +
    "\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047" +
    "\uffbc\050\uffbc\057\uffbc\060\uffbc\001\002\000\024\005\077" +
    "\012\074\033\066\051\100\052\071\053\075\054\076\055" +
    "\067\056\072\001\002\000\052\013\uffc1\020\uffc1\023\uffc1" +
    "\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1" +
    "\047\uffc1\050\uffc1\057\uffc1\060\uffc1\001\002\000\052\013" +
    "\uffc0\020\uffc0\023\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0" +
    "\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044" +
    "\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\057\uffc0\060\uffc0" +
    "\001\002\000\054\012\140\013\uffbd\020\uffbd\023\uffbd\032" +
    "\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047" +
    "\uffbd\050\uffbd\057\uffbd\060\uffbd\001\002\000\024\005\077" +
    "\012\074\033\066\051\100\052\071\053\075\054\076\055" +
    "\067\056\072\001\002\000\052\013\uffab\020\uffab\023\uffab" +
    "\032\106\033\103\034\113\035\120\036\111\037\104\040" +
    "\115\041\107\042\114\043\116\044\110\045\112\046\105" +
    "\047\uffab\050\uffab\057\uffab\060\uffab\001\002\000\024\005" +
    "\077\012\074\033\066\051\100\052\071\053\075\054\076" +
    "\055\067\056\072\001\002\000\024\005\077\012\074\033" +
    "\066\051\100\052\071\053\075\054\076\055\067\056\072" +
    "\001\002\000\024\005\077\012\074\033\066\051\100\052" +
    "\071\053\075\054\076\055\067\056\072\001\002\000\024" +
    "\005\077\012\074\033\066\051\100\052\071\053\075\054" +
    "\076\055\067\056\072\001\002\000\024\005\077\012\074" +
    "\033\066\051\100\052\071\053\075\054\076\055\067\056" +
    "\072\001\002\000\024\005\077\012\074\033\066\051\100" +
    "\052\071\053\075\054\076\055\067\056\072\001\002\000" +
    "\024\005\077\012\074\033\066\051\100\052\071\053\075" +
    "\054\076\055\067\056\072\001\002\000\024\005\077\012" +
    "\074\033\066\051\100\052\071\053\075\054\076\055\067" +
    "\056\072\001\002\000\024\005\077\012\074\033\066\051" +
    "\100\052\071\053\075\054\076\055\067\056\072\001\002" +
    "\000\024\005\077\012\074\033\066\051\100\052\071\053" +
    "\075\054\076\055\067\056\072\001\002\000\024\005\077" +
    "\012\074\033\066\051\100\052\071\053\075\054\076\055" +
    "\067\056\072\001\002\000\024\005\077\012\074\033\066" +
    "\051\100\052\071\053\075\054\076\055\067\056\072\001" +
    "\002\000\024\005\077\012\074\033\066\051\100\052\071" +
    "\053\075\054\076\055\067\056\072\001\002\000\024\005" +
    "\077\012\074\033\066\051\100\052\071\053\075\054\076" +
    "\055\067\056\072\001\002\000\024\005\077\012\074\033" +
    "\066\051\100\052\071\053\075\054\076\055\067\056\072" +
    "\001\002\000\052\013\uffb7\020\uffb7\023\uffb7\032\uffb7\033" +
    "\103\034\uffb7\035\uffb7\036\uffb7\037\104\040\uffb7\041\uffb7" +
    "\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050" +
    "\uffb7\057\uffb7\060\uffb7\001\002\000\052\013\uffb3\020\uffb3" +
    "\023\uffb3\032\106\033\103\034\113\035\120\036\111\037" +
    "\104\040\115\041\107\042\114\043\116\044\110\045\112" +
    "\046\105\047\102\050\uffb3\057\uffb3\060\uffb3\001\002\000" +
    "\036\013\uffb0\020\uffb0\023\uffb0\032\106\033\103\034\113" +
    "\035\120\036\111\037\104\040\115\047\uffb0\050\uffb0\057" +
    "\uffb0\060\uffb0\001\002\000\052\013\uffb4\020\uffb4\023\uffb4" +
    "\032\106\033\103\034\113\035\120\036\111\037\104\040" +
    "\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4" +
    "\047\uffb4\050\uffb4\057\uffb4\060\uffb4\001\002\000\036\013" +
    "\uffad\020\uffad\023\uffad\032\106\033\103\034\113\035\120" +
    "\036\111\037\104\040\115\047\uffad\050\uffad\057\uffad\060" +
    "\uffad\001\002\000\052\013\uffb9\020\uffb9\023\uffb9\032\uffb9" +
    "\033\103\034\uffb9\035\uffb9\036\uffb9\037\104\040\uffb9\041" +
    "\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9" +
    "\050\uffb9\057\uffb9\060\uffb9\001\002\000\036\013\uffb2\020" +
    "\uffb2\023\uffb2\032\106\033\103\034\113\035\120\036\111" +
    "\037\104\040\115\047\uffb2\050\uffb2\057\uffb2\060\uffb2\001" +
    "\002\000\052\013\uffb8\020\uffb8\023\uffb8\032\uffb8\033\103" +
    "\034\uffb8\035\uffb8\036\uffb8\037\104\040\uffb8\041\uffb8\042" +
    "\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8" +
    "\057\uffb8\060\uffb8\001\002\000\036\013\uffaf\020\uffaf\023" +
    "\uffaf\032\106\033\103\034\113\035\120\036\111\037\104" +
    "\040\115\047\uffaf\050\uffaf\057\uffaf\060\uffaf\001\002\000" +
    "\036\013\uffae\020\uffae\023\uffae\032\106\033\103\034\113" +
    "\035\120\036\111\037\104\040\115\047\uffae\050\uffae\057" +
    "\uffae\060\uffae\001\002\000\052\013\uffbb\020\uffbb\023\uffbb" +
    "\032\uffbb\033\103\034\113\035\120\036\111\037\104\040" +
    "\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb" +
    "\047\uffbb\050\uffbb\057\uffbb\060\uffbb\001\002\000\036\013" +
    "\uffb1\020\uffb1\023\uffb1\032\106\033\103\034\113\035\120" +
    "\036\111\037\104\040\115\047\uffb1\050\uffb1\057\uffb1\060" +
    "\uffb1\001\002\000\052\013\uffb5\020\uffb5\023\uffb5\032\uffb5" +
    "\033\103\034\uffb5\035\uffb5\036\uffb5\037\104\040\uffb5\041" +
    "\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5" +
    "\050\uffb5\057\uffb5\060\uffb5\001\002\000\052\013\uffba\020" +
    "\uffba\023\uffba\032\uffba\033\103\034\uffba\035\uffba\036\uffba" +
    "\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045" +
    "\uffba\046\uffba\047\uffba\050\uffba\057\uffba\060\uffba\001\002" +
    "\000\052\013\uffb6\020\uffb6\023\uffb6\032\106\033\103\034" +
    "\113\035\120\036\111\037\104\040\115\041\107\042\114" +
    "\043\116\044\110\045\112\046\105\047\uffb6\050\uffb6\057" +
    "\uffb6\060\uffb6\001\002\000\030\005\077\012\074\013\144" +
    "\033\066\051\100\052\071\053\075\054\076\055\067\056" +
    "\072\062\143\001\002\000\044\013\uffc6\032\106\033\103" +
    "\034\113\035\120\036\111\037\104\040\115\041\107\042" +
    "\114\043\116\044\110\045\112\046\105\047\102\050\117" +
    "\060\151\001\002\000\004\013\150\001\002\000\004\005" +
    "\145\001\002\000\052\013\uffc7\020\uffc7\023\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7" +
    "\050\uffc7\057\uffc7\060\uffc7\001\002\000\006\013\uffc4\060" +
    "\146\001\002\000\026\005\077\012\074\033\066\051\100" +
    "\052\071\053\075\054\076\055\067\056\072\062\143\001" +
    "\002\000\004\013\uffc3\001\002\000\052\013\uffc8\020\uffc8" +
    "\023\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\057\uffc8\060\uffc8\001\002\000" +
    "\026\005\077\012\074\033\066\051\100\052\071\053\075" +
    "\054\076\055\067\056\072\062\143\001\002\000\004\013" +
    "\uffc5\001\002\000\042\013\154\032\106\033\103\034\113" +
    "\035\120\036\111\037\104\040\115\041\107\042\114\043" +
    "\116\044\110\045\112\046\105\047\102\050\117\001\002" +
    "\000\052\013\uffaa\020\uffaa\023\uffaa\032\uffaa\033\uffaa\034" +
    "\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa" +
    "\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\057" +
    "\uffaa\060\uffaa\001\002\000\052\013\uffac\020\uffac\023\uffac" +
    "\032\uffac\033\103\034\uffac\035\uffac\036\uffac\037\uffac\040" +
    "\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac" +
    "\047\uffac\050\uffac\057\uffac\060\uffac\001\002\000\042\032" +
    "\106\033\103\034\113\035\120\036\111\037\104\040\115" +
    "\041\107\042\114\043\116\044\110\045\112\046\105\047" +
    "\102\050\117\057\uffd7\001\002\000\032\005\057\016\uffdf" +
    "\017\054\021\uffdf\022\046\024\045\025\060\026\051\027" +
    "\065\030\050\057\uffd6\061\063\001\002\000\006\016\uffde" +
    "\021\uffde\001\002\000\042\032\106\033\103\034\113\035" +
    "\120\036\111\037\104\040\115\041\107\042\114\043\116" +
    "\044\110\045\112\046\105\047\102\050\117\057\uffcd\001" +
    "\002\000\024\005\077\012\074\033\066\051\100\052\071" +
    "\053\075\054\076\055\067\056\072\001\002\000\042\032" +
    "\106\033\103\034\113\035\120\036\111\037\104\040\115" +
    "\041\107\042\114\043\116\044\110\045\112\046\105\047" +
    "\102\050\117\057\uffc9\001\002\000\004\004\165\001\002" +
    "\000\004\057\166\001\002\000\004\002\ufffd\001\002\000" +
    "\042\020\170\032\106\033\103\034\113\035\120\036\111" +
    "\037\104\040\115\041\107\042\114\043\116\044\110\045" +
    "\112\046\105\047\102\050\117\001\002\000\040\005\uffff" +
    "\006\006\007\012\010\014\011\010\017\uffff\022\uffff\024" +
    "\uffff\025\uffff\026\uffff\027\uffff\030\uffff\057\uffff\061\uffff" +
    "\063\013\001\002\000\026\005\057\017\054\022\046\024" +
    "\045\025\060\026\051\027\065\030\050\057\uffd6\061\063" +
    "\001\002\000\006\016\uffd4\021\173\001\002\000\040\005" +
    "\uffff\006\006\007\012\010\014\011\010\017\uffff\022\uffff" +
    "\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff\057\uffff\061" +
    "\uffff\063\013\001\002\000\004\016\175\001\002\000\004" +
    "\017\176\001\002\000\004\057\uffd5\001\002\000\026\005" +
    "\057\017\054\022\046\024\045\025\060\026\051\027\065" +
    "\030\050\057\uffd6\061\063\001\002\000\004\016\uffd3\001" +
    "\002\000\042\032\106\033\103\034\113\035\120\036\111" +
    "\037\104\040\115\041\107\042\114\043\116\044\110\045" +
    "\112\046\105\047\102\050\117\057\uffcc\001\002\000\042" +
    "\032\106\033\103\034\113\035\120\036\111\037\104\040" +
    "\115\041\107\042\114\043\116\044\110\045\112\046\105" +
    "\047\102\050\117\057\uffcb\001\002\000\042\023\204\032" +
    "\106\033\103\034\113\035\120\036\111\037\104\040\115" +
    "\041\107\042\114\043\116\044\110\045\112\046\105\047" +
    "\102\050\117\001\002\000\040\005\uffff\006\006\007\012" +
    "\010\014\011\010\017\uffff\022\uffff\024\uffff\025\uffff\026" +
    "\uffff\027\uffff\030\uffff\057\uffff\061\uffff\063\013\001\002" +
    "\000\026\005\057\017\054\022\046\024\045\025\060\026" +
    "\051\027\065\030\050\057\uffd6\061\063\001\002\000\004" +
    "\016\207\001\002\000\004\023\210\001\002\000\004\057" +
    "\uffd2\001\002\000\030\005\uffcf\012\uffcf\033\uffcf\051\uffcf" +
    "\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060" +
    "\uffcf\001\002\000\030\005\077\012\074\033\066\051\100" +
    "\052\071\053\075\054\076\055\067\056\072\057\uffd0\060" +
    "\214\001\002\000\042\032\106\033\103\034\113\035\120" +
    "\036\111\037\104\040\115\041\107\042\114\043\116\044" +
    "\110\045\112\046\105\047\102\050\117\057\uffd1\001\002" +
    "\000\004\005\215\001\002\000\030\005\uffce\012\uffce\033" +
    "\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce" +
    "\057\uffce\060\uffce\001\002\000\004\012\217\001\002\000" +
    "\016\006\006\007\012\010\014\011\010\013\uffe5\064\224" +
    "\001\002\000\004\005\246\001\002\000\004\013\231\001" +
    "\002\000\006\013\uffe3\060\uffe3\001\002\000\006\013\uffe4" +
    "\060\227\001\002\000\012\006\006\007\012\010\014\011" +
    "\010\001\002\000\004\005\226\001\002\000\006\013\uffe0" +
    "\060\uffe0\001\002\000\014\006\006\007\012\010\014\011" +
    "\010\064\224\001\002\000\006\013\uffe2\060\uffe2\001\002" +
    "\000\042\005\uffff\006\006\007\012\010\014\011\010\014" +
    "\233\017\uffff\022\uffff\024\uffff\025\uffff\026\uffff\027\uffff" +
    "\030\uffff\057\uffff\061\uffff\063\013\001\002\000\026\005" +
    "\057\017\054\022\046\024\045\025\060\026\051\027\065" +
    "\030\050\057\uffd6\061\063\001\002\000\012\006\006\007" +
    "\012\010\014\011\010\001\002\000\040\005\uffff\006\006" +
    "\007\012\010\014\011\010\017\uffff\022\uffff\024\uffff\025" +
    "\uffff\026\uffff\027\uffff\030\uffff\057\uffff\061\uffff\063\013" +
    "\001\002\000\026\005\057\017\054\022\046\024\045\025" +
    "\060\026\051\027\065\030\050\057\uffd6\061\063\001\002" +
    "\000\004\016\237\001\002\000\004\015\240\001\002\000" +
    "\004\057\241\001\002\000\006\004\uffe7\015\uffe7\001\002" +
    "\000\004\016\243\001\002\000\004\015\244\001\002\000" +
    "\004\057\245\001\002\000\006\004\uffe6\015\uffe6\001\002" +
    "\000\006\013\uffe1\060\uffe1\001\002\000\004\004\ufffb\001" +
    "\002\000\004\002\000\001\002\000\010\031\260\057\ufff4" +
    "\060\ufff4\001\002\000\006\057\254\060\253\001\002\000" +
    "\004\005\255\001\002\000\044\004\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\010\ufffa\011\ufffa\015\ufffa\017\ufffa\022\ufffa\024" +
    "\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\057\ufffa\061\ufffa" +
    "\063\ufffa\001\002\000\010\031\256\057\ufff3\060\ufff3\001" +
    "\002\000\024\005\077\012\074\033\066\051\100\052\071" +
    "\053\075\054\076\055\067\056\072\001\002\000\044\032" +
    "\106\033\103\034\113\035\120\036\111\037\104\040\115" +
    "\041\107\042\114\043\116\044\110\045\112\046\105\047" +
    "\102\050\117\057\ufff1\060\ufff1\001\002\000\024\005\077" +
    "\012\074\033\066\051\100\052\071\053\075\054\076\055" +
    "\067\056\072\001\002\000\044\032\106\033\103\034\113" +
    "\035\120\036\111\037\104\040\115\041\107\042\114\043" +
    "\116\044\110\045\112\046\105\047\102\050\117\057\ufff2" +
    "\060\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\012\002\004\003\006\006\010\007\003\001" +
    "\001\000\004\010\251\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\040\013\036\001\001\000\002\001" +
    "\001\000\010\003\035\006\010\007\003\001\001\000\002" +
    "\001\001\000\004\011\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\246\013\036\001\001\000\002\001\001\000\004\004\042" +
    "\001\001\000\010\003\043\006\010\007\003\001\001\000" +
    "\002\001\001\000\022\017\054\020\061\021\052\023\046" +
    "\024\063\026\060\027\055\030\051\001\001\000\004\025" +
    "\211\001\001\000\006\030\072\032\202\001\001\000\002" +
    "\001\001\000\006\030\072\032\201\001\001\000\006\030" +
    "\072\032\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\030\072\032\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\030\072\032\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\030" +
    "\072\032\155\001\001\000\002\001\001\000\006\030\072" +
    "\032\067\001\001\000\006\030\072\032\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\030\072\032\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\030\072\032\100\001\001\000\002\001\001\000" +
    "\006\030\072\032\136\001\001\000\006\030\072\032\135" +
    "\001\001\000\006\030\072\032\134\001\001\000\006\030" +
    "\072\032\133\001\001\000\006\030\072\032\132\001\001" +
    "\000\006\030\072\032\131\001\001\000\006\030\072\032" +
    "\130\001\001\000\006\030\072\032\127\001\001\000\006" +
    "\030\072\032\126\001\001\000\006\030\072\032\125\001" +
    "\001\000\006\030\072\032\124\001\001\000\006\030\072" +
    "\032\123\001\001\000\006\030\072\032\122\001\001\000" +
    "\006\030\072\032\121\001\001\000\006\030\072\032\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\030" +
    "\072\031\141\032\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\030\072\031\146\032\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\030\072\031\151\032" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\017" +
    "\157\020\061\021\052\023\046\024\063\026\060\027\055" +
    "\030\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\030\072\032\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\170\006\010\007\003\001\001\000\022" +
    "\017\171\020\061\021\052\023\046\024\063\026\060\027" +
    "\055\030\051\001\001\000\004\022\173\001\001\000\010" +
    "\003\176\006\010\007\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\017\177\020\061" +
    "\021\052\023\046\024\063\026\060\027\055\030\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\204\006\010\007\003\001" +
    "\001\000\022\017\205\020\061\021\052\023\046\024\063" +
    "\026\060\027\055\030\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\072\032\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\217" +
    "\014\220\015\222\016\221\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\224\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\217\016\227\001\001\000\002\001\001\000\010" +
    "\003\231\006\010\007\003\001\001\000\022\017\241\020" +
    "\061\021\052\023\046\024\063\026\060\027\055\030\051" +
    "\001\001\000\004\007\233\001\001\000\010\003\234\006" +
    "\010\007\003\001\001\000\022\017\235\020\061\021\052" +
    "\023\046\024\063\026\060\027\055\030\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\072\032\256\001\001\000\002\001\001\000\006\030" +
    "\072\032\260\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= VarDeclList FunList Main 
            {
              ProgramNode RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDeclList varDeclList = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int funListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunList funList = (FunList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mainNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mainNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MainNode mainNode = (MainNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ProgramNode programNode = new ProgramNode(varDeclList, funList, mainNode);
   RESULT = programNode; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VarDeclList ::= 
            {
              VarDeclList RESULT =null;
		 VarDeclList varDeclList = new VarDeclList(); RESULT = varDeclList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarDeclList ::= VarDecl VarDeclList 
            {
              VarDeclList RESULT =null;
		int varDeclNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclNode varDeclNode = (VarDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDeclList varDeclList = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 varDeclList.addVarDeclNode(varDeclNode); RESULT = varDeclList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Main ::= MAIN VarDeclList StatList END MAIN SEMI 
            {
              MainNode RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VarDeclList varDeclList = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		StatList statList = (StatList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new MainNode(varDeclList, statList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Main",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FunList ::= 
            {
              FunList RESULT =null;
		 FunList funList = new FunList(); RESULT = funList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FunList ::= Fun FunList 
            {
              FunList RESULT =null;
		int funNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunNode funNode = (FunNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int funListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunList funList = (FunList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  funList.addFunNode(funNode); RESULT = funList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= Type IdListInit SEMI 
            {
              VarDeclNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeLeaf type = (TypeLeaf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idListInitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListInitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdListInit idListInit = (IdListInit)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDeclNode(type, idListInit); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarDecl ::= VAR IdListInitObbl SEMI 
            {
              VarDeclNode RESULT =null;
		int idListInitObblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListInitObblright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdListInitObbl idListInitObbl = (IdListInitObbl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDeclNode(new VarLeaf(), idListInitObbl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= INTEGER 
            {
              TypeLeaf RESULT =null;
		 RESULT = new TypeLeaf("INTEGER"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= BOOL 
            {
              TypeLeaf RESULT =null;
		 RESULT = new TypeLeaf("BOOL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= REAL 
            {
              TypeLeaf RESULT =null;
		 RESULT = new TypeLeaf("REAL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= STRING 
            {
              TypeLeaf RESULT =null;
		 RESULT = new TypeLeaf("STRING"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdListInit ::= ID 
            {
              IdListInit RESULT =null;
		int lexValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lexValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lexVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 IdListInit idListInit = new IdListInit(new IdLeaf(lexVal)); RESULT = idListInit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdListInit ::= IdListInit COMMA ID 
            {
              IdListInit RESULT =null;
		int idListInitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListInitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdListInit idListInit = (IdListInit)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lexValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lexValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lexVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 idListInit.addExprListElement(new IdLeaf(lexVal)); RESULT = idListInit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IdListInit ::= ID ASSIGN Expr 
            {
              IdListInit RESULT =null;
		int lexValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lexValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String lexVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 IdListInit idListInit = new IdListInit(new IdLeaf(lexVal), exprNode); RESULT = idListInit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IdListInit ::= IdListInit COMMA ID ASSIGN Expr 
            {
              IdListInit RESULT =null;
		int idListInitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idListInitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		IdListInit idListInit = (IdListInit)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lexValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lexValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String lexVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 idListInit.addExprListElement(new IdLeaf(lexVal), exprNode); RESULT = idListInit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IdListInitObbl ::= ID ASSIGN Const 
            {
              IdListInitObbl RESULT =null;
		int lexValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lexValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String lexVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int constLeafleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int constLeafright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstLeaf constLeaf = (ConstLeaf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 IdListInitObbl idListInitObbl = new IdListInitObbl(new IdLeaf(lexVal), constLeaf); RESULT = idListInitObbl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInitObbl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IdListInitObbl ::= IdListInitObbl COMMA ID ASSIGN Const 
            {
              IdListInitObbl RESULT =null;
		int idListInitObblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idListInitObblright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		IdListInitObbl idListInitObbl = (IdListInitObbl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lexValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lexValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String lexVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int constLeafleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int constLeafright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstLeaf constLeaf = (ConstLeaf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 idListInitObbl.addExprListElement(new IdLeaf(lexVal), constLeaf); RESULT = idListInitObbl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInitObbl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= INTEGER_CONST 
            {
              ConstLeaf RESULT =null;
		int lexValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lexValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer lexVal = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstLeaf("ConstLeaf", Integer.toString(lexVal)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= REAL_CONST 
            {
              ConstLeaf RESULT =null;
		int lexValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lexValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double lexVal = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstLeaf("ConstLeaf", Double.toString(lexVal)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= TRUE 
            {
              ConstLeaf RESULT =null;
		 RESULT = new ConstLeaf("ConstLeaf", "true"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= FALSE 
            {
              ConstLeaf RESULT =null;
		 RESULT = new ConstLeaf("ConstLeaf", "false"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Const ::= STRING_CONST 
            {
              ConstLeaf RESULT =null;
		int lexValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lexValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lexVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstLeaf("ConstLeaf", String.valueOf(lexVal).replace("'","\"")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Const ::= MINUS INTEGER_CONST 
            {
              ConstLeaf RESULT =null;
		int lexValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lexValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer lexVal = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstLeaf("ConstLeaf", Integer.toString(-lexVal)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Const ::= MINUS REAL_CONST 
            {
              ConstLeaf RESULT =null;
		int lexValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lexValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double lexVal = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstLeaf("ConstLeaf", Double.toString(-lexVal)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Fun ::= FUN ID LPAR ParamDeclList RPAR COLON Type VarDeclList StatList END FUN SEMI 
            {
              FunNode RESULT =null;
		int lexValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int lexValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String lexVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int paramDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int paramDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParamDeclList paramDeclList = (ParamDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		TypeLeaf type = (TypeLeaf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VarDeclList varDeclList = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		StatList statList = (StatList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new FunNode(new IdLeaf(lexVal), paramDeclList, type, varDeclList, statList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Fun",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Fun ::= FUN ID LPAR ParamDeclList RPAR VarDeclList StatList END FUN SEMI 
            {
              FunNode RESULT =null;
		int lexValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int lexValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String lexVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int paramDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int paramDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParamDeclList paramDeclList = (ParamDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VarDeclList varDeclList = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		StatList statList = (StatList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new FunNode(new IdLeaf(lexVal), paramDeclList, varDeclList, statList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Fun",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ParamDeclList ::= 
            {
              ParamDeclList RESULT =null;
		 ParamDeclList paramDeclList = new ParamDeclList(); RESULT = paramDeclList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ParamDeclList ::= NonEmptyParamDeclList 
            {
              ParamDeclList RESULT =null;
		int nonEmptyParamDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nonEmptyParamDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NonEmptyParamDeclList nonEmptyParamDeclList = (NonEmptyParamDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ParamDeclList paramDeclList = new ParamDeclList(); paramDeclList.addNonEmptyParamDeclList(nonEmptyParamDeclList); RESULT = paramDeclList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NonEmptyParamDeclList ::= ParDecl 
            {
              NonEmptyParamDeclList RESULT =null;
		int parDeclNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDeclNode parDeclNode = (ParDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 NonEmptyParamDeclList nonEmptyParamDeclList = new NonEmptyParamDeclList(parDeclNode); RESULT = nonEmptyParamDeclList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NonEmptyParamDeclList ::= NonEmptyParamDeclList COMMA ParDecl 
            {
              NonEmptyParamDeclList RESULT =null;
		int nonEmptyParamDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nonEmptyParamDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NonEmptyParamDeclList nonEmptyParamDeclList = (NonEmptyParamDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parDeclNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDeclNode parDeclNode = (ParDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 nonEmptyParamDeclList.addParDeclNode(parDeclNode); RESULT = nonEmptyParamDeclList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ParDecl ::= Type ID 
            {
              ParDeclNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeLeaf type = (TypeLeaf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lexValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lexValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lexVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParDeclNode(type, new IdLeaf(lexVal)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ParDecl ::= OUT Type ID 
            {
              ParDeclNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeLeaf type = (TypeLeaf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lexValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lexValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lexVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParDeclNode(new OutLeaf(), type, new IdLeaf(lexVal)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // StatList ::= Stat SEMI 
            {
              StatList RESULT =null;
		int statNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatNode statNode = (StatNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 StatList statList = new StatList(statNode); RESULT = statList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // StatList ::= Stat SEMI StatList 
            {
              StatList RESULT =null;
		int statNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int statNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatNode statNode = (StatNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatList statList = (StatList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 statList.addStatNode(statNode); RESULT = statList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stat ::= IfStat 
            {
              StatNode RESULT =null;
		int ifNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfStatNode ifNode = (IfStatNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StatNode(ifNode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Stat ::= WhileStat 
            {
              StatNode RESULT =null;
		int whileNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int whileNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhileStatNode whileNode = (WhileStatNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StatNode(whileNode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Stat ::= ReadStat 
            {
              StatNode RESULT =null;
		int readNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int readNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ReadStatNode readNode = (ReadStatNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StatNode(readNode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= WriteStat 
            {
              StatNode RESULT =null;
		int writeNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int writeNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WriteStatNode writeNode = (WriteStatNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StatNode(writeNode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= AssignStat 
            {
              StatNode RESULT =null;
		int assignNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int assignNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignStatNode assignNode = (AssignStatNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StatNode(assignNode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= CallFun 
            {
              StatNode RESULT =null;
		int callFunNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int callFunNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallFunNode callFunNode = (CallFunNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StatNode(callFunNode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= RETURN Expr 
            {
              StatNode RESULT =null;
		int exprNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StatNode(exprNode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stat ::= 
            {
              StatNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IfStat ::= IF Expr THEN VarDeclList StatList Else END IF 
            {
              IfStatNode RESULT =null;
		int exprNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int exprNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ExprNode exprNode = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VarDeclList varDeclList = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		StatList statList = (StatList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elseNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elseNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ElseNode elseNode = (ElseNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IfStatNode(exprNode, varDeclList, statList, elseNode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Else ::= 
            {
              ElseNode RESULT =null;
		 RESULT = new ElseNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Else ::= ELSE VarDeclList StatList 
            {
              ElseNode RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclList varDeclList = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatList statList = (StatList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ElseNode(varDeclList, statList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // WhileStat ::= WHILE Expr LOOP VarDeclList StatList END LOOP 
            {
              WhileStatNode RESULT =null;
		int exprNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExprNode exprNode = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList varDeclList = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatList statList = (StatList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WhileStatNode(exprNode, varDeclList, statList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ReadStat ::= READ IdList Expr 
            {
              ReadStatNode RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdList idList = (IdList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReadStatNode(idList, exprNode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ReadStat ::= READ IdList 
            {
              ReadStatNode RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdList idList = (IdList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReadStatNode(idList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IdList ::= ID 
            {
              IdList RESULT =null;
		int lexValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lexValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lexVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 IdList idList = new IdList(new IdLeaf(lexVal)); RESULT = idList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IdList ::= IdList COMMA ID 
            {
              IdList RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdList idList = (IdList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lexValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lexValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lexVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 idList.addIdLeaf(new IdLeaf(lexVal)); RESULT = idList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // WriteStat ::= WRITE Expr 
            {
              WriteStatNode RESULT =null;
		int exprNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WriteStatNode(new WriteStatLeaf("WRITE") ,exprNode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // WriteStat ::= WRITELN Expr 
            {
              WriteStatNode RESULT =null;
		int exprNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WriteStatNode(new WriteStatLeaf("WRITELN") ,exprNode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // WriteStat ::= WRITET Expr 
            {
              WriteStatNode RESULT =null;
		int exprNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WriteStatNode(new WriteStatLeaf("WRITET") ,exprNode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // WriteStat ::= WRITEB Expr 
            {
              WriteStatNode RESULT =null;
		int exprNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WriteStatNode(new WriteStatLeaf("WRITEB") ,exprNode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // AssignStat ::= ID ASSIGN Expr 
            {
              AssignStatNode RESULT =null;
		int lexValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lexValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String lexVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignStatNode(new IdLeaf(lexVal), exprNode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignStat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CallFun ::= ID LPAR ExprList RPAR 
            {
              CallFunNode RESULT =null;
		int lexValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lexValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String lexVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprList exprList = (ExprList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallFunNode(new IdLeaf(lexVal), exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallFun",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CallFun ::= ID LPAR RPAR 
            {
              CallFunNode RESULT =null;
		int lexValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lexValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String lexVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CallFunNode(new IdLeaf(lexVal)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallFun",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ExprList ::= Expr 
            {
              ExprList RESULT =null;
		int exprNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExprList exprList = new ExprList(exprNode); RESULT = exprList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ExprList ::= Expr COMMA ExprList 
            {
              ExprList RESULT =null;
		int exprNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode exprNode = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprList exprList = (ExprList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 exprList.addExprListElement(exprNode); RESULT = exprList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ExprList ::= OUTPAR ID 
            {
              ExprList RESULT =null;
		int lexValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lexValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lexVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExprList exprList = new ExprList(new IdLeaf("@"+lexVal)); RESULT = exprList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ExprList ::= OUTPAR ID COMMA ExprList 
            {
              ExprList RESULT =null;
		int lexValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lexValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String lexVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprList exprList = (ExprList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 exprList.addExprListElement(new IdLeaf("@"+lexVal)); RESULT = exprList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= TRUE 
            {
              ExprNode RESULT =null;
		 RESULT = new ExprNode(new ConstLeaf("true", "true")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= FALSE 
            {
              ExprNode RESULT =null;
		 RESULT = new ExprNode(new ConstLeaf("false", "false")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= INTEGER_CONST 
            {
              ExprNode RESULT =null;
		int lexValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lexValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer lexVal = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode(new ConstLeaf("INTEGER_CONST", Integer.toString(lexVal))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= REAL_CONST 
            {
              ExprNode RESULT =null;
		int lexValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lexValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double lexVal = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode(new ConstLeaf("REAL_CONST", Double.toString(lexVal))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= STRING_CONST 
            {
              ExprNode RESULT =null;
		int lexValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lexValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lexVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode(new ConstLeaf("STRING_CONST", lexVal)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= ID 
            {
              ExprNode RESULT =null;
		int lexValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lexValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lexVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode(new IdLeaf(lexVal)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= CallFun 
            {
              ExprNode RESULT =null;
		int callFunNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int callFunNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallFunNode callFunNode = (CallFunNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode(callFunNode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= Expr PLUS Expr 
            {
              ExprNode RESULT =null;
		int exprNode1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprNode1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode exprNode1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprNode2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNode2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("AddOp", exprNode1, exprNode2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= Expr MINUS Expr 
            {
              ExprNode RESULT =null;
		int exprNode1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprNode1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode exprNode1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprNode2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNode2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("DiffOp", exprNode1, exprNode2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= Expr TIMES Expr 
            {
              ExprNode RESULT =null;
		int exprNode1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprNode1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode exprNode1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprNode2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNode2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("MulOp", exprNode1, exprNode2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= Expr DIV Expr 
            {
              ExprNode RESULT =null;
		int exprNode1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprNode1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode exprNode1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprNode2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNode2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("DivOp", exprNode1, exprNode2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= Expr DIVINT Expr 
            {
              ExprNode RESULT =null;
		int exprNode1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprNode1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode exprNode1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprNode2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNode2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("DivIntOp", exprNode1, exprNode2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Expr AND Expr 
            {
              ExprNode RESULT =null;
		int exprNode1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprNode1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode exprNode1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprNode2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNode2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("AndOp", exprNode1, exprNode2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Expr POW Expr 
            {
              ExprNode RESULT =null;
		int exprNode1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprNode1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode exprNode1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprNode2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNode2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("PowOp", exprNode1, exprNode2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Expr STR_CONCAT Expr 
            {
              ExprNode RESULT =null;
		int exprNode1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprNode1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode exprNode1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprNode2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNode2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("StrCatOp", exprNode1, exprNode2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Expr OR Expr 
            {
              ExprNode RESULT =null;
		int exprNode1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprNode1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode exprNode1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprNode2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNode2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("OrOp", exprNode1, exprNode2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr GT Expr 
            {
              ExprNode RESULT =null;
		int exprNode1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprNode1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode exprNode1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprNode2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNode2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("GTOp", exprNode1, exprNode2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr GE Expr 
            {
              ExprNode RESULT =null;
		int exprNode1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprNode1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode exprNode1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprNode2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNode2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("GEOp", exprNode1, exprNode2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr LT Expr 
            {
              ExprNode RESULT =null;
		int exprNode1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprNode1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode exprNode1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprNode2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNode2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("LTOp", exprNode1, exprNode2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr LE Expr 
            {
              ExprNode RESULT =null;
		int exprNode1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprNode1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode exprNode1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprNode2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNode2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("LEOp", exprNode1, exprNode2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr EQ Expr 
            {
              ExprNode RESULT =null;
		int exprNode1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprNode1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode exprNode1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprNode2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNode2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("EQOp", exprNode1, exprNode2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr NE Expr 
            {
              ExprNode RESULT =null;
		int exprNode1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprNode1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode exprNode1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprNode2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNode2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("NEOp", exprNode1, exprNode2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= MINUS Expr 
            {
              ExprNode RESULT =null;
		int exprNode1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNode1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("UminusOp", exprNode1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= NOT Expr 
            {
              ExprNode RESULT =null;
		int exprNode1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNode1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNode("NotOp", exprNode1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= LPAR Expr RPAR 
            {
              ExprNode RESULT =null;
		int exprNode1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprNode1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprNode exprNode1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprNode(exprNode1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
